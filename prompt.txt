We are creating a "back-end" & "front-end" service in python using flask as the back-end to interact with the twitter (now x) api to create, delete, and retrieve tweets. We will use javascript and php to interact with HTML on Wordpress in the front-end. The GUI on the front-end will be created by inserting short-code into wordpress. Here is some useful information to take note of, we will have:

1. A directory called "/x-app". 

A) It should contain the "x-twitter-python-flask-app.py" file. This is a very important back-end file and will have all the coded methods to call the x-twitter API to create, delete, and request a tweet (request the most recently posted, and delete the most recently posted). 

More information regarding the "x-twitter-python-flask-app.py" file: 

Python environment set up
You will need to have Python 3 installed to run this code. The Python samples use requests==2.24.0 which uses requests-oauthlib==1.3.0.

(Optionally) It is common and recommended not to install required package globally, but locally under project subfolder using venv:

python3 -m venv venv
source venv/bin/activate
You can install these packages as follows:

pip install requests
pip install requests-oauthlib

More information regarding looking up a specific user's tweets:
'''  
def create_url():
    # Replace with user ID below
    user_id = 2244994945
    return "https://api.twitter.com/2/users/{}/tweets".format(user_id)


def get_params():
    # Tweet fields are adjustable.
    # Options include:
    # attachments, author_id, context_annotations,
    # conversation_id, created_at, entities, geo, id,
    # in_reply_to_user_id, lang, non_public_metrics, organic_metrics,
    # possibly_sensitive, promoted_metrics, public_metrics, referenced_tweets,
    # source, text, and withheld
    return {"tweet.fields": "created_at"}


def bearer_oauth(r):
    """
    Method required by bearer token authentication.
    """

    r.headers["Authorization"] = f"Bearer {bearer_token}"
    r.headers["User-Agent"] = "v2UserTweetsPython"
    return r


def connect_to_endpoint(url, params):
    response = requests.request("GET", url, auth=bearer_oauth, params=params)
    print(response.status_code)
    if response.status_code != 200:
        raise Exception(
            "Request returned an error: {} {}".format(
                response.status_code, response.text
            )
        )
    return response.json()


def main():
    url = create_url()
    params = get_params()
    json_response = connect_to_endpoint(url, params)
    print(json.dumps(json_response, indent=4, sort_keys=True))


if __name__ == "__main__":
    main()
'''

More information regarding creating a tweet:
'''
from requests_oauthlib import OAuth1Session
import os
import json

# In your terminal please set your environment variables by running the following lines of code.
# export 'CONSUMER_KEY'='<your_consumer_key>'
# export 'CONSUMER_SECRET'='<your_consumer_secret>'

consumer_key = os.environ.get("CONSUMER_KEY")
consumer_secret = os.environ.get("CONSUMER_SECRET")

# Be sure to add replace the text of the with the text you wish to Tweet. You can also add parameters to post polls, quote Tweets, Tweet with reply settings, and Tweet to Super Followers in addition to other features.
payload = {"text": "Hello world!"}

# Get request token
request_token_url = "https://api.twitter.com/oauth/request_token?oauth_callback=oob&x_auth_access_type=write"
oauth = OAuth1Session(consumer_key, client_secret=consumer_secret)

try:
    fetch_response = oauth.fetch_request_token(request_token_url)
except ValueError:
    print(
        "There may have been an issue with the consumer_key or consumer_secret you entered."
    )

resource_owner_key = fetch_response.get("oauth_token")
resource_owner_secret = fetch_response.get("oauth_token_secret")
print("Got OAuth token: %s" % resource_owner_key)

# Get authorization
base_authorization_url = "https://api.twitter.com/oauth/authorize"
authorization_url = oauth.authorization_url(base_authorization_url)
print("Please go here and authorize: %s" % authorization_url)
verifier = input("Paste the PIN here: ")

# Get the access token
access_token_url = "https://api.twitter.com/oauth/access_token"
oauth = OAuth1Session(
    consumer_key,
    client_secret=consumer_secret,
    resource_owner_key=resource_owner_key,
    resource_owner_secret=resource_owner_secret,
    verifier=verifier,
)
oauth_tokens = oauth.fetch_access_token(access_token_url)

access_token = oauth_tokens["oauth_token"]
access_token_secret = oauth_tokens["oauth_token_secret"]

# Make the request
oauth = OAuth1Session(
    consumer_key,
    client_secret=consumer_secret,
    resource_owner_key=access_token,
    resource_owner_secret=access_token_secret,
)

# Making the request
response = oauth.post(
    "https://api.twitter.com/2/tweets",
    json=payload,
)

if response.status_code != 201:
    raise Exception(
        "Request returned an error: {} {}".format(response.status_code, response.text)
    )

print("Response code: {}".format(response.status_code))

# Saving the response as JSON
json_response = response.json()
print(json.dumps(json_response, indent=4, sort_keys=True))
'''

More information regarding deleting a tweet:
'''
from requests_oauthlib import OAuth1Session
import os
import json

# In your terminal please set your environment variables by running the following lines of code.
# export 'CONSUMER_KEY'='<your_consumer_key>'
# export 'CONSUMER_SECRET'='<your_consumer_secret>'

consumer_key = os.environ.get("CONSUMER_KEY")
consumer_secret = os.environ.get("CONSUMER_SECRET")


# Be sure to replace tweet-id-to-delete with the id of the Tweet you wish to delete. The authenticated user must own the list in order to delete

id = "tweet-id-to-delete"


# Get request token
request_token_url = "https://api.twitter.com/oauth/request_token"
oauth = OAuth1Session(consumer_key, client_secret=consumer_secret)

try:
    fetch_response = oauth.fetch_request_token(request_token_url)
except ValueError:
    print(
        "There may have been an issue with the consumer_key or consumer_secret you entered."
    )

resource_owner_key = fetch_response.get("oauth_token")
resource_owner_secret = fetch_response.get("oauth_token_secret")
print("Got OAuth token: %s" % resource_owner_key)

# Get authorization
base_authorization_url = "https://api.twitter.com/oauth/authorize"
authorization_url = oauth.authorization_url(base_authorization_url)
print("Please go here and authorize: %s" % authorization_url)
verifier = input("Paste the PIN here: ")

# Get the access token
access_token_url = "https://api.twitter.com/oauth/access_token"
oauth = OAuth1Session(
    consumer_key,
    client_secret=consumer_secret,
    resource_owner_key=resource_owner_key,
    resource_owner_secret=resource_owner_secret,
    verifier=verifier,
)
oauth_tokens = oauth.fetch_access_token(access_token_url)

access_token = oauth_tokens["oauth_token"]
access_token_secret = oauth_tokens["oauth_token_secret"]

# Make the request
oauth = OAuth1Session(
    consumer_key,
    client_secret=consumer_secret,
    resource_owner_key=access_token,
    resource_owner_secret=access_token_secret,
)

# Making the request
response = oauth.delete("https://api.twitter.com/2/tweets/{}".format(id))

if response.status_code != 200:
    raise Exception(
        "Request returned an error: {} {}".format(response.status_code, response.text)
    )

print("Response code: {}".format(response.status_code))

# Saving the response as JSON
json_response = response.json()
print(json_response)
'''

B) It should contain a "x-twitter-forms.js" file that will be used to make AJAX calls to "/wp-admin/admin-ajax.php". This will handle the communication between the back-end "x-twitter-python-flask-app.py" file and the front-end "x-twitter-GUI.php" file.

C) It should contain a "x-twitter-GUI.php" file which will enqueue Javascript from the "x-twitter-forms.js" file, and activate it in a function to load the scripts. It will add actions for this purpose as well. 

More information regarding "x-twitter-GUI.php":

The most important function of this php file is to create a "x_twitter_proxy_endpoint_function" that will be used to make the calls to the flask python app. The function will echo the response that is sent back (if successful) to the create and delete tweet divs. If for example, the create function is called because the short-code for one of the HTML divs activate a method to create a tweet, the proxy function should use the "/create_tweet" (in the flask python file) endpoint to echo a response that the tweet was made successfully to the "create_div". It should also alter the contents of the "delete_tweet" div to contain the tweet that was recently made. On the other hand, if no tweet is created using this code, then the delete tweet div should be able to call the "/retrieve_tweet" endpoint (in the flask python file) and retrieve the most recently created tweet for the user holding ($Bearer_Token) when the HTML page containing the short_code is requested on wordpress. When the delete tweet method is used by using the short_code, the proxy should delete the tweet that is being shown in the "delete_tweet" div (aka, the most recently made by the holder of "$Bearer_Token") by using the "/delete_tweet" endpoint in the flask python file. 

This file will contain a function to create the short-code for the front-end GUI. The short code should create two HTML divs, stacked on top of each other. Each div will have a form or method to either create a tweet (form should be a text box as input that will be the contents of the tweet) or delete a tweet (form should use the retrieve endpoint to retrieve the most recent tweet, and a button should be posted to initiate the deletion). The function to create the short-code will also have an add_shortcode call. 

The flask app should thus have methods to create, delete, and retrieve tweets, making sure to modify the $Bearer_Token to a mock value, and  setting the methods @app.route paths to endpoints such as '/create_tweet', '/delete_tweet', and '/retrieve_tweet'. Take extra liberty with providing sufficient code for the retrieve tweet method (it should retrieve the most recently posted tweet for the user). Similarly, for the delete tweet method.

2. A "requirements.txt" file should exist in the main project directory, and should list all the necessary installs for the twitter service. 

3. A "Dockerfile" file should exist in the main project directory.

It should use the "FROM python:3.8-slim-buster" command to utilize this python image for the docker container.

More information regarding "Dockerfile":

It should define the container environment for the service by using the commands "COPY requirements.txt requirements.txt" & "RUN pip3 install -r requirements.txt". 

It should use the "WORKDIR /x-app" command to set the containers working directory to the "/x-app" directory, which should have already been created in a previous step.

It should use the "ENV FLASK_APP x-twitter-python-flask-app.py" command to utilize this python file for the app, and the "RUN ls -al /x-app" command to list the files in the x-app directory. 

Finally, it should use the "CMD [ "python3", "-u", "-m" , "flask", "run", "--host=0.0.0.0"]" command to run the flask app.

4. A "docker-compose.yml" file which contains the wordpress container service to be launched as the front-end alongside a MySQL database container service, and the x-twitter-flask-app container service. These services should be networked together. 

More information regarding "docker-compose.yml":

The x-twitter-flask-app service should be using the build context '.' (the main project directory) & have the key-value "dockerfile:Dockerfile", as the Dockerfile file was created for the flask container. It should also have the key-value "Volumes: -./x-app:/x-app" to import the x-app directory to the working directory for the twitter service. 

For the wordpress and database containers, feel free to use this example code as inspiration: 

wordpress:
    image: wordpress:latest
    ports:
      - 80:80
    environment:
      WORDPRESS_DB_HOST: exampledb
      WORDPRESS_DB_USER: exampleuser
      WORDPRESS_DB_PASSWORD: examplepass
      WORDPRESS_DB_NAME: exampledb
    volumes:
      - ./x-app:/var/www/html/wp-content/plugins/x-app
    depends_on:
      - exampledb
      - x-twitter-flask-app
    networks:
      - my-network

  exampledb:
    image: mysql:5.7
    environment:
      MYSQL_DATABASE: exampledb
      MYSQL_USER: exampleuser
      MYSQL_PASSWORD: examplepass
      MYSQL_ROOT_PASSWORD: examplepass
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - my-network

